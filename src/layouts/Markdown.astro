---
import Layout from './Layout.astro';
export interface Props {
  content: {
    title: string;
    description?: string;
    author?: string;
    date?: string;
  }
}

const { title, description = '', author, date } = Astro.props.content;
---

<!--
  Markdown.astro
  A focused markdown layout that composes into the site's primary `Layout.astro`.
  Usage (in a markdown page frontmatter):
    layout: ../layouts/Markdown.astro
    title: "Page title"
    description: "Short description"

  This component renders an article wrapper (prose classes) and a small
  client-side Table of Contents generator for h2/h3 headings.
-->

<Layout title={title} description={description}>
  <article class="container mx-auto px-4 py-10">
    <div class="prose lg:prose-lg dark:prose-invert max-w-none">
      <header class="mb-6">
        <h1 class="text-3xl font-bold">{title}</h1>
        <div class="text-sm text-muted mt-1">
          {author && <span>By {author}</span>}
          {author && date && <span class="mx-2">â€¢</span>}
          {date && <time datetime={date}>{date}</time>}
        </div>
      </header>

      <nav id="toc" aria-label="Table of contents" class="mb-6 hidden md:block">
        <!-- Table of contents will be populated by the script below -->
      </nav>

      <section id="content">
        <slot />
      </section>

      <footer class="mt-8 text-sm text-muted border-t border-jpmc-gray-200 pt-4">
        <p>
          Sources and links within are provided inline. For corrections or
          suggestions, please send us an email or let us know on discord.
        </p>
      </footer>
    </div>
  </article>

  <script>
    // Build a simple Table of Contents from h2/h3 headings for accessibility
    (function () {
      try {
        const content = document.getElementById('content');
        const toc = document.getElementById('toc');
        if (!content || !toc) return;

        const headings = content.querySelectorAll('h2, h3');
        if (!headings.length) return;

        const list = document.createElement('ul');
        list.className = 'space-y-1 text-sm';

        headings.forEach(h => {
          if (!h.id) {
            h.id = h.textContent.trim().toLowerCase().replace(/[^a-z0-9]+/g, '-');
          }
          const li = document.createElement('li');
          li.innerHTML = `<a href="#${h.id}" class="text-jpmc-blue-700 dark:text-jpmc-blue-300 hover:underline">${h.textContent}</a>`;
          list.appendChild(li);
        });

        const heading = document.createElement('div');
        heading.className = 'font-semibold mb-2';
        heading.textContent = 'Contents';
        toc.appendChild(heading);
        toc.appendChild(list);
      } catch (e) {
        // fail silently
        console.warn('TOC generation failed', e);
      }
    })();
  </script>
</Layout>
