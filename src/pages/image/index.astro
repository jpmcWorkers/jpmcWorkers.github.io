---
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

// Pre-import all images using glob from public directory
const allImages = import.meta.glob('/public/images/**/*.{png,jpg,jpeg,webp,gif}', { eager: true });

// Get all images
const imageEntries = await getCollection('images');

// Helper function to calculate display dimensions while maintaining aspect ratio
function calculateDisplayDimensions(width?: number, height?: number, maxSize: number = 300) {
  if (!width || !height) {
    return { width: maxSize, height: maxSize };
  }
  
  // Scale based on the larger dimension
  const maxDimension = Math.max(width, height);
  const scaleFactor = Math.min(maxSize / maxDimension, 1); // Don't upscale
  
  return {
    width: Math.round(width * scaleFactor),
    height: Math.round(height * scaleFactor)
  };
}
---

<Layout title="Images - JPMC Workers Alliance">
  <div class="prose prose-lg max-w-none">
    <h1 class="text-4xl font-bold text-jpmc-blue mb-8">Images & Materials</h1>
    
    <div class="mb-8">
      <p class="text-xl text-gray-700">
        Download and share these images and resources to support the JPMC Workers Alliance.
      </p>
    </div>

    <div class="grid grid-cols-[repeat(auto-fill,minmax(250px,1fr))]  gap-6">
      {imageEntries.map(async (entry) => {
        // Calculate proper dimensions for the preview image
        const imageToUse = entry.data.preview || entry.data.file;
        const dimensionsToUse = entry.data.preview 
          ? { width: entry.data.previewWidth, height: entry.data.previewHeight }
          : { width: entry.data.width, height: entry.data.height };
        
        const displayDimensions = calculateDisplayDimensions(
          dimensionsToUse.width, 
          dimensionsToUse.height, 
          300
        );
        
        // Get the image from pre-imported images
        const imagePath = `/public/images/${imageToUse}`;
        const imageModule = allImages[imagePath] as { default: any } | undefined;
        
        return (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden border-2 border-gray-200 dark:border-gray-700 flex flex-col items-space-between">
            {/* Preview Image */}
            <div class="aspect-square dark:bg-gray-700 flex items-center justify-center">
              
                {entry.data.type.toLowerCase() === 'pdf' && !(entry.data.preview?.trim()) 
                ? (
                  <div
                    class="text-gray-500 dark:text-gray-400 flex items-center justify-center p-4 min-h-[250px] object-cover">
                      <span>No Preview Available</span>
                  </div>)
                : imageModule ? <Image
                  width={displayDimensions.width}
                  height={displayDimensions.height}
                  src={imageModule.default}
                  alt={entry.data.name}
                  class="w-full h-full object-cover"
                /> : (
                  <div class="text-gray-500 dark:text-gray-400 flex items-center justify-center p-4 min-h-[250px] object-cover">
                    <span>Image not found: {imageToUse}</span>
                  </div>
                )}
            </div>
          
          {/* Content */}
          <div class="p-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 truncate">
              {entry.data.name.replace(/\.[^/.]+$/, '')}
            </h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
              {entry.data.type.toUpperCase()} â€¢ {entry.data.isFolder ? 'Folder' : 'File'}
            </p>
            {/* <pre>{JSON.stringify(entry.data, null, 2)}</pre> */}
            
            {/* Download Button */}
            <a 
              href={`/images/${entry.data.file}`}
              download
              class="inline-block w-full bg-jpmc-blue text-white text-center px-4 py-2 rounded-md hover:bg-jpmc-blue-700 transition-colors"
            >
              Download
            </a>
          </div>
        </div>
        );
      })}
    </div>
  </div>
</Layout>

 