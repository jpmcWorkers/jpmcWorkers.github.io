---
// Bingo Card Component
// Generates a 5x5 bingo card with customizable content
interface Props {
  title?: string;
  items?: string[];
  theme?: 'default' | 'jpmc' | 'union';
  className?: string;
}
import { PRO_UNION_BINGO_ITEMS } from './bingo';

const {
  title = "Bingo Card",
  items = PRO_UNION_BINGO_ITEMS.map(item => item.name),
  theme = 'default',
  className = ""
} = Astro.props;

// Shuffle items and take first 24 for 5x5 grid (middle is free space)
const shuffledItems = [...items].sort(() => Math.random() - 0.5).slice(0, 24);
---

<div class={`bingo-card ${className}`} data-theme={theme}>
  <h2 class="text-2xl font-bold text-center mb-6">{title}</h2>
  
  <div class="bingo-grid grid grid-cols-5 gap-2 max-w-2xl mx-auto">
    {Array.from({ length: 25 }, (_, index) => {
      const isMiddle = index === 12; // Middle square (row 3, col 3)
      const item = isMiddle ? "Jamie puts his foot in his mouth" : shuffledItems[index > 12 ? index - 1 : index];
      
      return (
        <div 
          class={`bingo-cell border-2 p-3 text-center text-sm font-medium min-h-[80px] flex items-center justify-center ${
            isMiddle 
              ? 'bg-green-100 border-green-400 text-green-800 font-bold' 
              : 'bg-white border-gray-300 cursor-pointer hover:bg-gray-50 transition-colors'
          }`}
          data-index={index}
          data-item={item}
          data-is-middle={isMiddle}
        >
          {item}
        </div>
      );
    })}
  </div>
  
  <div class="mt-6 text-center space-y-4">
    <div class="flex justify-center gap-4">
      <button 
        id="new-card-btn"
        class="bg-jpmc-blue text-white px-6 py-2 rounded-md hover:bg-jpmc-blue-700 transition-colors"
      >
        Generate New Card
      </button>
      <button 
        id="print-btn"
        class="bg-gray-600 text-white px-6 py-2 rounded-md hover:bg-gray-700 transition-colors"
      >
        Print Card
      </button>
      <button 
        id="clear-btn"
        class="bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700 transition-colors"
      >
        Clear All
      </button>
    </div>
    
    <div class="text-sm text-gray-600">
      Click on squares to mark them as completed
    </div>
  </div>
</div>

<style>
  .bingo-cell.marked {
    background-color: #10b981;
    color: white;
    border-color: #059669;
  }
  
  .bingo-cell.marked:hover {
    background-color: #059669;
  }
  
  @media print {
    .bingo-card button {
      display: none;
    }
    
    .bingo-card {
      page-break-inside: avoid;
    }
  }
</style>

<script>
  // Make bingo items available globally
  import { PRO_UNION_BINGO_ITEMS } from './bingo';
  
  class BingoCard {
    cells: NodeListOf<Element>;
    newCardBtn: HTMLElement | null;
    printBtn: HTMLElement | null;
    clearBtn: HTMLElement | null;
    hasStarted: boolean;
    hasWon: boolean;

    constructor() {
      this.cells = document.querySelectorAll('.bingo-cell');
      this.newCardBtn = document.getElementById('new-card-btn');
      this.printBtn = document.getElementById('print-btn');
      this.clearBtn = document.getElementById('clear-btn');
      this.hasStarted = false;
      this.hasWon = false;
      
      this.init();
    }
    
    init() {
      // Load saved state
      this.loadState();
      
      // Add event listeners
      this.cells.forEach(cell => {
        cell.addEventListener('click', () => this.toggleCell(cell));
      });
      
      this.newCardBtn?.addEventListener('click', () => this.generateNewCard());
      this.printBtn?.addEventListener('click', () => this.printCard());
      this.clearBtn?.addEventListener('click', () => this.clearAll());
      
      // Check for wins
      this.checkWin();
    }
    
    toggleCell(cell: HTMLElement) {
      // Don't allow clicking on middle free space
      if (cell.getAttribute('data-is-middle') === 'true') {
        return;
      }
      
      // Mark that the game has started
      if (!this.hasStarted) {
        this.hasStarted = true;
        this.saveState();
      }
      
      cell.classList.toggle('marked');
      this.saveState();
      this.checkWin();
    }
    
    generateNewCard() {
      // Only allow new card if game hasn't started or if player has won
      if (this.hasStarted && !this.hasWon) {
        alert("You can only generate a new card if you haven't started playing yet, or if you've already won!");
        return;
      }
      
      const items = PRO_UNION_BINGO_ITEMS.map(item => item.name);
      
      // Shuffle and take first 24 (middle is free space)
      const shuffledItems = items.toSorted(() => Math.random() - 0.5).slice(0, 24);
      
      // Update cell content
      this.cells.forEach((cell, index) => {
        const isMiddle = index === 12;
        if (isMiddle) {
          cell.textContent = "Jamie puts his foot in his mouth";
          cell.classList.remove('marked');
          cell.setAttribute('data-item', "Jamie puts his foot in his mouth");
          cell.setAttribute('data-is-middle', 'true');
          cell.className = 'bingo-cell bg-green-100 border-2 border-green-400 p-3 text-center text-sm font-medium min-h-[80px] flex items-center justify-center text-green-800 font-bold';
        } else {
          const itemIndex = index > 12 ? index - 1 : index;
          cell.textContent = shuffledItems[itemIndex];
          cell.classList.remove('marked');
          cell.setAttribute('data-item', shuffledItems[itemIndex]);
          cell.setAttribute('data-is-middle', 'false');
          cell.className = 'bingo-cell bg-white border-2 border-gray-300 p-3 text-center text-sm font-medium cursor-pointer hover:bg-gray-50 transition-colors min-h-[80px] flex items-center justify-center';
        }
      });
      
      // Reset game state
      this.hasStarted = false;
      this.hasWon = false;
      this.saveState();
      this.checkWin();
    }
    
    printCard() {
      window.print();
    }
    
    clearAll() {
      this.cells.forEach(cell => {
        cell.classList.remove('marked');
      });
      this.saveState();
      this.checkWin();
    }
    
    saveState() {
      const state = {
        cells: Array.from(this.cells).map(cell => ({
          item: cell.getAttribute('data-item'),
          marked: cell.classList.contains('marked'),
          isMiddle: cell.getAttribute('data-is-middle') === 'true'
        })),
        hasStarted: this.hasStarted,
        hasWon: this.hasWon,
        lastUpdated: new Date().toISOString()
      };
      localStorage.setItem('bingo-card-state', JSON.stringify(state));
    }
    
    loadState() {
      const saved = localStorage.getItem('bingo-card-state');
      if (saved) {
        try {
          const state = JSON.parse(saved);
          
          // Handle old format (just array of cells)
          if (Array.isArray(state)) {
            this.cells.forEach((cell, index) => {
              if (state[index]) {
                cell.textContent = state[index].item;
                cell.setAttribute('data-item', state[index].item);
                if (state[index].marked) {
                  cell.classList.add('marked');
                }
              }
            });
          } else {
            // New format with game state
            this.hasStarted = state.hasStarted || false;
            this.hasWon = state.hasWon || false;
            
            if (state.cells) {
              this.cells.forEach((cell, index) => {
                if (state.cells[index]) {
                  const cellData = state.cells[index];
                  cell.textContent = cellData.item;
                  cell.setAttribute('data-item', cellData.item);
                  cell.setAttribute('data-is-middle', cellData.isMiddle ? 'true' : 'false');
                  
                  if (cellData.isMiddle) {
                    cell.className = 'bingo-cell bg-green-100 border-2 border-green-400 p-3 text-center text-sm font-medium min-h-[80px] flex items-center justify-center text-green-800 font-bold';
                  } else {
                    cell.className = 'bingo-cell bg-white border-2 border-gray-300 p-3 text-center text-sm font-medium cursor-pointer hover:bg-gray-50 transition-colors min-h-[80px] flex items-center justify-center';
                  }
                  
                  if (cellData.marked) {
                    cell.classList.add('marked');
                  }
                }
              });
            }
          }
        } catch (e) {
          console.warn('Failed to load bingo card state:', e);
        }
      }
    }
    
    checkWin() {
      const winPatterns = [
        // Rows
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8, 9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19],
        [20, 21, 22, 23, 24],
        // Columns
        [0, 5, 10, 15, 20],
        [1, 6, 11, 16, 21],
        [2, 7, 12, 17, 22],
        [3, 8, 13, 18, 23],
        [4, 9, 14, 19, 24],
        // Diagonals
        [0, 6, 12, 18, 24],
        [4, 8, 12, 16, 20]
      ];
      
      const hasWin = winPatterns.some(pattern => 
        pattern.every(index => {
          const cell = this.cells[index];
          // Middle space (index 12) is always considered marked
          if (index === 12) return true;
          return cell.classList.contains('marked');
        })
      );
      
      if (hasWin && !this.hasWon) {
        this.hasWon = true;
        this.showWinMessage();
        this.saveState();
      }
    }
    
    showWinMessage() {
      // Remove existing win message
      const existing = document.querySelector('.win-message');
      if (existing) existing.remove();
      
      const message = document.createElement('div');
      message.className = 'win-message fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
      message.textContent = 'ðŸŽ‰ BINGO! You got a line!';
      
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.remove();
      }, 3000);
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new BingoCard();
  });
</script>
