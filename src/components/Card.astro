---

const borderColors = {
  "cyan": "border-cyan-500",
  "gold": "border-jpmc-gold",
  "blue": "border-jpmc-blue",
  "gray": "border-jpmc-gray",
  "red": "border-jpmc-red",
  "green": "border-jpmc-green",
  "purple": "border-jpmc-purple",
  "orange": "border-jpmc-orange",
  "pink": "border-jpmc-pink",
  "brown": "border-jpmc-brown",
  "teal": "border-jpmc-teal",
  "indigo": "border-jpmc-indigo",
  "violet": "border-jpmc-violet",
  "lime": "border-jpmc-lime",
} as const;

interface Props {
  title: string;
  description: string;
  link?: string;
  linkText?: string;
  borderColor?: keyof typeof borderColors;
  className?: string;
  badges?: Array<{ text: string; color: string; bgColor: string }>;
  date?: string;
  hoverColor?: string;
}

const {
  title,
  description,
  link,
  linkText = title,
  borderColor = "cyan",
  className = "",
  badges = [],
  date,
  hoverColor = "cyan-600"
} = Astro.props;

---

<div
  class={`bg-white p-6 rounded-lg shadow-md border-l-4 ${borderColors[borderColor]} ${className}`}
>
  <h3 class="text-xl font-semibold text-jpmc-dark mb-3">
    {link ? (
      <a
        href={link}
        class={`hover:text-${hoverColor} transition-colors`}
      >
        {linkText}
      </a>
    ) : (
      title
    )}
  </h3>
  <p class="text-gray-600 mb-4">
    {description}
  </p>
  
  {(badges.length > 0 || date) && (
    <div class="text-sm text-gray-500">
      {badges.map((badge) => (
        <span class={`${badge.bgColor} ${badge.color} px-2 py-1 rounded mr-2`}>
          {badge.text}
        </span>
      ))}
      {date && (
        <span class="text-gray-400">{date}</span>
      )}
    </div>
  )}
</div>